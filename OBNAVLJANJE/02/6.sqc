#include <stdio.h>
#include <stdlib.h>

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
sqlint32 hIndeks;
short hSuma;
sqlint32 hIdPrograma;
EXEC SQL END DECLARE SECTION;

void checkSQL(const char *msg)
{
  if (SQLCODE < 0) {
    fprintf(stderr, "%d: %s\n", SQLCODE, msg);

    EXEC SQL CONNECT RESET;
    exit(EXIT_FAILURE);
  }
}

int main()
{
  EXEC SQL CONNECT TO stud2020;
  checkSQL("CONNECT FAILED");

  EXEC SQL 
    DECLARE cNajvisePolozeni 
    CURSOR FOR 
      WITH POM AS (
        SELECT I.INDEKS, SUM(P.ESPB) SUMA, D.IDPROGRAMA
        FROM DA.ISPIT I JOIN DA.DOSIJE D ON I.INDEKS = D.INDEKS
            JOIN DA.PREDMET P ON P.ID = I.IDPREDMETA
        WHERE I.OCENA > 5 AND I.STATUS = 'o'
        GROUP BY I.INDEKS, D.IDPROGRAMA 
      )
      SELECT D.INDEKS, P1.SUMA, P1.IDPROGRAMA
      FROM POM P1 JOIN DA.DOSIJE D ON P1.INDEKS = D.INDEKS
      WHERE P1.SUMA IN (
        SELECT MAX(P2.SUAM)
        FROM POM P2
        WHERE P2.IDPROGRAMA = P1.IDPROGRAMA
      )
      ORDER BY P1.IDPROGRAMA;
  checkSQL("DECLARE cNajvisePolozeni FAILED");

  EXEC SQL 
    DECLARE cPoslednjiPolozen 
    CURSOR FOR 
      WITH POM AS (
        SELECT I.INDEKS, MAX(DATPOLAGANJA) DATPOSLEDNJEG
        FROM DA.ISPIT I JOIN DA.DOSIJE D ON D.INDEKS = I.INDEKS
        WHERE I.OCENA > 5 AND I.STATUS = 'o'
        GROUP BY I.INDEKS 
        HAVING MAX(DATPOLAGANJA) IS NOT NULL
      )
      SELECT INDEKS 
      FROM DA.ISPIT I 
      WHERE I.INDEKS = :hIndeks AND 
        EXISTS (
          SELECT *
          FROM POM P1 
          WHERE I.INDEKS = P1.INDEKS AND P1.DATPOSLEDNJEG = I.DATPOLAGANJA
        )
    FOR UPDATE OF NAPOMENA;
  checkSQL("DELARE cPoslednjiPolozen FAILED");

  EXEC SQL OPEN cNajvisePolozeni;
  checkSQL("OPEN cNajvisePolozeni FAILED");

  while (1) {
    EXEC SQL 
      FETCH cNajvisePolozeni
      INTO :hIndeks, :hSuma, :hIdPrograma;
    checkSQL("FETCH cNajvisePolozeni FAILED");

    if (SQLCODE == 100)
      break;

    printf("%d %hd %d\n", hIndeks, hSuma, hIdPrograma);

    EXEC SQL OPEN cPoslednjiPolozen;
    checkSQL("OPEN cPoslednjiPolozen FAILED");

    while (1) {

      EXEC SQL 
        FETCH cPoslednjiPolozen
        INTO :hIndeks;

      if (SQLCODE == 100)
        break;
      
      EXEC SQL 
        UPDATE DA.ISPIT 
        SET NAPOMENA = 'Ovo je student koji ima najvise polozenih kredita na svom smeru'
        WHERE CURRENT OF cPoslednjiPolozen;
      


    }

    EXEC SQL CLOSE cPoslednjiPolozen;
    checkSQL("CLOSE cPoslednjiPolozen FAILED");
  }

  EXEC SQL CLOSE cNajvisePolozeni;
  checkSQL("CLOSE cNajvisePolozeni FAILED");

  EXC SQL CONNECT RESET;
  checkSQL("CONNECT RESET FAILED");

  return 0;
}