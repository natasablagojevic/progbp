/*
/SQL program u kojem se naredbe izvršavaju dinamički koji čita SQL naredbu iz datoteke čiji se naziv zadaje kao prvi argument komandne linije. SQL naredba se čita do pojave karaktera ; ili do kraja datoteke, ispisuje se korisniku, a potom se izvršava. Pretpostaviti da korisnik neće uneti naredbu SELECT, kao ni da neće sadržati parametarske oznake. Pretpostaviti da naredba koja se čita iz datoteke nije duža od 255 karaktera.

Datoteku koja sadrži SQL naredbu koja povećava ESPB bodove svim predmetima za 1. Izvršiti naredbu iz ove datoteke napisanim programom.

*/

#include <stdio.h>
#include <stdlib.h>
#include <sql.h> // sqlaintp

EXEC SQL INCLUDE SQLCA;

EXEC SQL BEGIN DECLARE SECTION;
char hStatement[255];
EXEC SQL END DECLARE SECTION;

void checkSQL(const char *msg)
{
	if (sqlca.sqlcode < 0) {
    char buf[1024]; 
    short bufSize = sizeof(buf);
    short lineWidth = 50;
    sqlaintp(buf, bufSize, lineWidth, &sqlca);

		fprintf(stderr, "%s : %d\n", msg, sqlca.sqlcode);
    fprintf(stderr, "%s\n", buf);

		EXEC SQL CONNECT RESET;
		exit(EXIT_FAILURE);
	}
}

int main()
{
  if (argc != 2) {
    fprintf(stderr, "argc failed");
    exit(EXIT_FAILURE);
  }

  FILE *ulaz = fopen(argv[1], "r");
    if (ulaz == NULL) {
      fprintf(stderr, "fopen failed");
      exit(EXIT_FAILURE);
    }

	EXEC SQL CONNECT TO stud2020;
	checkSQL("Konekcija");


  int n = 0;
  int c;

  while (n < sizeof(hStatement)) {
    c = fgetc(ulaz);

    if (c == ';' || c == EOF) 
      break;

    hStatement[n] = (char)c;
    n++;
  }

  fclose(f);

  printf("\nIzvrsavamo naredbu: \n");
  printf("%s\n", hStatement);

  EXEC SQL 
    EXECUTE IMMEDIATE :hStatement;
  checkSQL("EXECUTE IMMEDIATE failed");

  printf("Naredba je izvrsena!");
	
	
	EXEC SQL CONNECT RESET;
	checkSQL("Prekidanje konekcije");

	return 0;
}
